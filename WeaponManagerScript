using UnityEngine;
using System.Collections;


public class WeaponManagerScript : MonoBehaviour {


	//Variables
	public GameObject[] weapons;
	public int currentWeapon;

	public int ammo;
	public int clipSize;
	public int maxStoredAmmo;

	public bool occupied = false;

	public float health;

	public bool held;

	public int cash;

	//UI Variables
	//public UnityEngine.UI.Text currentWeaponUI;
	public TextMesh ammoUI;
	public UnityEngine.UI.Image redFlash;
	public UnityEngine.UI.Text healthUI;

	public UnityEngine.UI.Image crosshair;
	public GameObject shop;

	public bool shopping = false;

	public void AddWeapon(GameObject item)
	{
		GameObject[] tempWeapons = new GameObject[weapons.Length + 1];
		weapons.CopyTo(tempWeapons,0);
		tempWeapons[weapons.Length] = item;

		weapons = tempWeapons;

	}

	public void TakeDamage(float damage)
	{
		redFlash.CrossFadeAlpha( 0.5f, 0f,false);
		health -= damage;
		redFlash.CrossFadeAlpha (0f, 0.5f,false);
	}
	void UpdateUI()
	{
		
		GunShootScript gunShootScript = weapons [currentWeapon].GetComponent<GunShootScript> ();
		healthUI.text = health +"/"+"100";
		if (gunShootScript) {
			ammoUI.text = ""+gunShootScript.ammo;
		} else {
			GrenadeThrowScript grenadeThrowScript = weapons [currentWeapon].GetComponent<GrenadeThrowScript> ();
			if (grenadeThrowScript) {
				ammoUI.text = "Ammo: " + grenadeThrowScript.ammo + "/" + grenadeThrowScript.storedAmmo;
			} else {
				ammoUI.text = "N/A";
			}
		}

		if (shopping == false) {
			Vector3 mousePos = Input.mousePosition;
		}


	}
	// Use this for initialization
	void Start () {
		redFlash.CrossFadeAlpha (0f, 0f,false);
		SwitchToCurrentWeapon ();
	}
	
	// Update is called once per frame
	void Update () {
		if (shopping == false) {
			Cursor.lockState = CursorLockMode.Locked;
			Cursor.visible = false;

		} else if (shopping == true) {
			Cursor.lockState = CursorLockMode.None;
			Cursor.visible = true;
		}
		if (occupied == false) {
			UpdateUI ();
			int pseudoWeapon = currentWeapon;
			if (Input.GetKeyDown ("q")) {
				if (pseudoWeapon < weapons.Length - 1) {
					pseudoWeapon += 1;
				} else if (pseudoWeapon == weapons.Length - 1) {
					pseudoWeapon = 0;
				}
				currentWeapon = pseudoWeapon;
				SwitchToCurrentWeapon ();

			}
			GunShootScript gunShootScript = weapons [currentWeapon].GetComponent<GunShootScript> ();

			if (Input.GetMouseButtonDown (0)) {
				if (gunShootScript) {
					if (gunShootScript.automatic == true) {
						held = true;
					} else if (gunShootScript.automatic == false) {
						weapons [currentWeapon].SendMessage ("Fire", null, SendMessageOptions.DontRequireReceiver);
					}

				} else {
					GrenadeThrowScript grenadeThrowScript = weapons [currentWeapon].GetComponent<GrenadeThrowScript> ();
					if (grenadeThrowScript) {
						weapons [currentWeapon].SendMessage ("Throw", null, SendMessageOptions.DontRequireReceiver);
					}
				}
			}

			if (Input.GetMouseButtonUp (0)) {

				if (gunShootScript) {
					if (gunShootScript.automatic == true) {
						held = false;
					}

				}
			}
		}

		if (Input.GetKeyDown (KeyCode.E)) {
			if (shopping == true) {
				crosshair.gameObject.SetActive (true);
				shopping = false;
				shop.SetActive (false);

			} else if (shopping == false) {
				crosshair.gameObject.SetActive (false);
				shopping = true;
				shop.SetActive (true);

			}
		}
	}

	void SwitchToCurrentWeapon()
	{
		for (int weaponCount = 0; weaponCount < weapons.Length; weaponCount++)
		{
			if (weaponCount != currentWeapon) 
			{
				weapons [weaponCount].SetActive (false);
			}
			else if (weaponCount == currentWeapon) 
			{
				weapons [weaponCount].SetActive (true);

			}
		}
		UpdateUI ();
	}


}
